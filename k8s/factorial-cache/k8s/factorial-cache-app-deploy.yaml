apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-factorial-cache-app
  namespace: factorial
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: factorial-cache-app
  template:
    metadata:
      labels:
        app: factorial-cache-app
    spec:
      terminationGracePeriodSeconds: 60 # default 30s
      volumes:
        # 임시 볼륨
        - name: cache-volume
          emptyDir:
            medium: Memory  # 메모리 상에서 임시 저장
        - name: log-volume
          persistentVolumeClaim:
            claimName: cache-log-storage-claim
      containers:
        - name: factorial
          image: hbleejoy/factorial-cache-app:0.0.6
          imagePullPolicy: Always # prod 환경에서는 없는 것이 좋다. (태그 버전은 고유의 값으로)
          volumeMounts:
            - mountPath: /factorial/logs
              name: log-volume
            - mountPath: /factorial/cache
              name: cache-volume
          env:
            - name: APP_LANGUAGE
              valueFrom:
                configMapKeyRef:
                  name: factorial-config
                  key: language
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: factorial-secret
                  key: api-key
          lifecycle:
            preStop:
              exec:
                # terminationGracePeriodSeconds 시간 안에서 수행되는 것임
                command: ["/bin/sh", "-c", "sleep 10"]
          readinessProbe:
            httpGet:
              path: /probe/healthcheck
              port: 8080
            initialDelaySeconds: 15  # startupProbe 설정되어있으면 크게 의미가 없다.
            periodSeconds: 1
            successThreshold: 2
            failureThreshold: 3 # readiness는 좀더 민감하게 거는 것이 좋다.
          livenessProbe:
            httpGet:
              path: /probe/healthcheck
              port: 8080
            initialDelaySeconds: 15  # startupProbe 설정되어있으면 크게 의미가 없다.
            periodSeconds: 1
            failureThreshold: 7  # readiness에 비해 덜 민감하게 잡는 것이 좋다. (재시작 시켜버리기 때문)